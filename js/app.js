
// –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = {
    currentUser: null,
    friends: [],
    isSidebarOpen: false,
    isFriendsOpen: false,
    tempLocation: null,
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
    initApp: function() {
        document.getElementById('auth-page').style.display = 'none';
        document.getElementById('app-page').style.display = 'block';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        document.getElementById('user-name').textContent = this.currentUser.name;
        document.getElementById('user-avatar').textContent = this.currentUser.name.charAt(0);
        this.updateUserStatus(this.currentUser.status);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
        mapModule.initMap();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.loadUserData();
    },
    
    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserData: function() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥—Ä—É–∑–µ–π
            this.friends = database.getFriends(this.currentUser.id);
            this.renderFriends();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userLocation = database.getLocation(this.currentUser.id);
            if (userLocation) {
                this.displayUserLocation(userLocation);
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –º–µ—Ç–∫–∏ –¥—Ä—É–∑–µ–π
            const friendsLocations = database.getFriendsLocations(this.currentUser.id);
            mapModule.showFriendsLocations(friendsLocations);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        }
    },
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    displayUserLocation: function(location) {
        document.getElementById('current-location').textContent = 
            `–®–∏—Ä–æ—Ç–∞: ${location.lat.toFixed(4)}, –î–æ–ª–≥–æ—Ç–∞: ${location.lng.toFixed(4)}`;
        document.getElementById('location-info').textContent = '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ';
        document.getElementById('clear-location-btn').style.display = 'block';
        
        mapModule.saveUserLocation(location);
    },
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    updateUserStatus: function(status) {
        const indicator = document.getElementById('user-status-indicator');
        const text = document.getElementById('user-status-text');
        
        indicator.className = 'status-indicator ' + status;
        text.textContent = mapModule.getStatusText(status);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        if (this.currentUser) {
            this.currentUser.status = status;
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        }
    },
    
    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π
    renderFriends: function() {
        const friendsList = document.getElementById('friends-list');
        friendsList.innerHTML = '';
        
        if (this.friends.length === 0) {
            friendsList.innerHTML = '<p style="text-align: center; opacity: 0.7; padding: 20px;">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π</p>';
            return;
        }
        
        this.friends.forEach(friend => {
            const friendItem = document.createElement('div');
            friendItem.className = 'friend-item';
            
            const friendLocation = database.getLocation(friend.id);
            const hasLocation = friendLocation && friendLocation.visibility === 'all';
            
            friendItem.innerHTML = `
                <div class="friend-avatar">${friend.name.charAt(0)}</div>
                <div class="friend-info">
                    <h4>${friend.name}</h4>
                    <p>${mapModule.getStatusText(friend.status)} ${hasLocation ? 'üìç' : ''}</p>
                </div>
            `;
            
            friendItem.addEventListener('click', () => {
                const location = database.getLocation(friend.id);
                mapModule.showFriendLocation(friend, location);
                this.closeFriends();
            });
            
            friendsList.appendChild(friendItem);
        });
    },
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    toggleSidebar: function() {
        const sidebar = document.querySelector('.app-sidebar');
        this.isSidebarOpen = !this.isSidebarOpen;
        sidebar.classList.toggle('active', this.isSidebarOpen);
        
        if (this.isFriendsOpen) {
            this.closeFriends();
        }
    },
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    closeSidebar: function() {
        const sidebar = document.querySelector('.app-sidebar');
        sidebar.classList.remove('active');
        this.isSidebarOpen = false;
    },
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –¥—Ä—É–∑–µ–π
    toggleFriends: function() {
        const friendsPanel = document.querySelector('.friends-panel');
        this.isFriendsOpen = !this.isFriendsOpen;
        friendsPanel.classList.toggle('active', this.isFriendsOpen);
        
        if (this.isSidebarOpen) {
            this.closeSidebar();
        }
    },
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –¥—Ä—É–∑–µ–π
    closeFriends: function() {
        const friendsPanel = document.querySelector('.friends-panel');
        friendsPanel.classList.remove('active');
        this.isFriendsOpen = false;
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞
    showAddFriendModal: function() {
        document.getElementById('add-friend-modal').style.display = 'flex';
        this.closeSidebar();
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –º–µ—Ç–∫–∏
    showLocationModal: function() {
        const modal = document.getElementById('location-modal');
        const locationInfo = document.getElementById('modal-location-info');
        
        if (this.tempLocation) {
            locationInfo.textContent = `–®–∏—Ä–æ—Ç–∞: ${this.tempLocation.lat.toFixed(4)}, –î–æ–ª–≥–æ—Ç–∞: ${this.tempLocation.lng.toFixed(4)}`;
        } else {
            const currentText = document.getElementById('current-location').textContent;
            locationInfo.textContent = currentText !== '–ù–µ –≤—ã–±—Ä–∞–Ω–æ' ? currentText : '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ';
        }
        
        modal.style.display = 'flex';
        this.closeSidebar();
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    showSettingsModal: function() {
        document.getElementById('settings-modal').style.display = 'flex';
        document.getElementById('status-select').value = this.currentUser.status || 'online';
        this.closeSidebar();
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    showDatabaseInfo: function() {
        this.showDatabaseTab('users');
        document.getElementById('database-modal').style.display = 'flex';
        this.closeSidebar();
        this.loadDatabaseData();
    },
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –≤–∫–ª–∞–¥–∫—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    showDatabaseTab: function(tabName) {
        // –°–∫—Ä—ã—Ç—å –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.tab-content').forEach(tab => {
            tab.classList.remove('active');
        });
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        // –ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        document.getElementById(tabName + '-tab').classList.add('active');
        document.querySelector(`.tab-btn[onclick="app.showDatabaseTab('${tabName}')"]`).classList.add('active');
    },
    
    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    loadDatabaseData: function() {
        try {
            const data = database.getAllData();
            
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            let usersHtml = '<table><tr><th>ID</th><th>–ò–º—è</th><th>Email</th><th>–°—Ç–∞—Ç—É—Å</th><th>–°–æ–∑–¥–∞–Ω</th></tr>';
            data.users.forEach(user => {
                usersHtml += `<tr><td>${user.id}</td><td>${user.name}</td><td>${user.email}</td><td>${user.status}</td><td>${new Date(user.created_at).toLocaleString()}</td></tr>`;
            });
            usersHtml += '</table>';
            document.getElementById('users-table').innerHTML = usersHtml;
            
            // –î—Ä—É–∑—å—è
            let friendsHtml = '<table><tr><th>ID</th><th>User ID</th><th>Friend ID</th><th>–°–æ–∑–¥–∞–Ω</th></tr>';
            data.friends.forEach(friend => {
                friendsHtml += `<tr><td>${friend.id}</td><td>${friend.user_id}</td><td>${friend.friend_id}</td><td>${new Date(friend.created_at).toLocaleString()}</td></tr>`;
            });
            friendsHtml += '</table>';
            document.getElementById('friends-table').innerHTML = friendsHtml;
            
            // –ú–µ—Ç–∫–∏
            let locationsHtml = '<table><tr><th>ID</th><th>User ID</th><th>–®–∏—Ä–æ—Ç–∞</th><th>–î–æ–ª–≥–æ—Ç–∞</th><th>–í–∏–¥–∏–º–æ—Å—Ç—å</th><th>–û–±–Ω–æ–≤–ª–µ–Ω–æ</th></tr>';
            data.locations.forEach(location => {
                locationsHtml += `<tr><td>${location.id}</td><td>${location.user_id}</td><td>${location.lat}</td><td>${location.lng}</td><td>${location.visibility}</td><td>${new Date(location.updated_at).toLocaleString()}</td></tr>`;
            });
            locationsHtml += '</table>';
            document.getElementById('locations-table').innerHTML = locationsHtml;
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ë–î:', error);
        }
    },
    
    // –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    closeModal: function(modalId) {
        document.getElementById(modalId).style.display = 'none';
    },
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞
    addFriend: function() {
        const email = document.getElementById('friend-email').value.trim();
        
        if (!email) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –¥—Ä—É–≥–∞');
            return;
        }
        
        if (email === this.currentUser.email) {
            alert('–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è –≤ –¥—Ä—É–∑—å—è');
            return;
        }
        
        try {
            const friend = database.getUserByEmail(email);
            if (!friend) {
                alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            
            database.addFriend(this.currentUser.id, friend.id);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
            this.friends = database.getFriends(this.currentUser.id);
            this.renderFriends();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫–∏ –¥—Ä—É–∑–µ–π –Ω–∞ –∫–∞—Ä—Ç–µ
            const friendsLocations = database.getFriendsLocations(this.currentUser.id);
            mapModule.showFriendsLocations(friendsLocations);
            
            document.getElementById('friend-email').value = '';
            this.closeModal('add-friend-modal');
            
            alert(`–î—Ä—É–≥ ${friend.name} –¥–æ–±–∞–≤–ª–µ–Ω!`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞:', error);
            alert(error.message || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞');
        }
    },
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∫–∏
    saveLocation: function() {
        if (!this.tempLocation && document.getElementById('current-location').textContent === '–ù–µ –≤—ã–±—Ä–∞–Ω–æ') {
            alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ');
            return;
        }
        
        const location = this.tempLocation || database.getLocation(this.currentUser.id);
        if (!location) {
            alert('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –∫–∞—Ä—Ç–µ');
            return;
        }
        
        const visibility = document.getElementById('location-visibility').value;
        
        try {
            database.saveLocation(this.currentUser.id, {
                lat: location.lat,
                lng: location.lng,
                visibility: visibility
            });
            
            this.displayUserLocation({ lat: location.lat, lng: location.lng, visibility: visibility });
            this.tempLocation = null;
            this.closeModal('location-modal');
            
            alert('–ú–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∫–∏:', error);
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç–∫–∏');
        }
    },
    
    // –û—á–∏—Å—Ç–∫–∞ –º–µ—Ç–∫–∏
    clearLocation: function() {
        try {
            database.deleteLocation(this.currentUser.id);
            mapModule.clearUserLocation();
            this.closeModal('location-modal');
            alert('–ú–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞!');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏:', error);
            alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Ç–∫–∏');
        }
    },
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    saveSettings: function() {
        const status = document.getElementById('status-select').value;
        
        this.updateUserStatus(status);
        alert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
        this.closeModal('settings-modal');
    }
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
window.onload = function() {
    const savedUser = localStorage.getItem('currentUser');
    if (savedUser) {
        app.currentUser = JSON.parse(savedUser);
        app.initApp();
    }
};
